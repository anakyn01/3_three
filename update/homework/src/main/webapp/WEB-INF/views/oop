객체 지향 개념 : 실세계의 개체를 속성과 메서드가 결합한 형태의 객체로 표현하는 기법.
객체지향 구성요소
	class
	 - 특정 객체 내에 있는 변수와 메서드를 정의하는 일종의 틀
	 - 객체지향 프로그래밍에서 데이터를 추상화하는 단위 
	 - 하나 이상의 유사한객체들을 묶어서 하나의 공통된 특성을 표현. 
	 - 속성은 변수의 형태로, 행위는 메서드의 형태로 선언
	Object
	 - 물리적 추상적으로 자신과 다른 것을 식별 가능한 대상. 
	 - 클래스에서 정의한 것을 토대로 메모리에 할당. 
	 - 객체마다 각각의 상태와 식별성을 가짐.
	Method 
	 - 클래스로부터 생성된 객체를 사용하는 방법. 
	 - 객체가 메시지를 받아 실행해야할 구체적인 연산 전통적 시스템의 함수 또는 프로시저에 해당하는 연산기능
	Message
	 - 객체간의 상호작용을 하기 위한 수단
	 - 객체에게 어떤 행위를 하도록 지시하는 방법
	 - 객체간의 상호작용은 메시지를 통해 이루어짐.
	instance
	 - 객체지향 기법에서 클래스를 통해 만든 실제 실형객체
	 - 클래스에 속한 각각의 객체
	 - 실제 메모리에 할당
	property
	 - 한 클래스 내에 속한 객체들이 가지고 있는 데이터값들을 단위별로 정리

객체지향기법
	캡슐화
	 - 서로 연관된 데이터와 함수를 함꼐 묶어 외부와 경계를 만들고 인터페이스만 밖으로 드러내는 기법.
	다형성
	 - 오버로딩 : 타입을 다르게 해 메소드 이름을 똑같이 사용하는 기법.
	 - 오버라이딩 : 하위클래스에서 상위클래스 무시 후 재정의
	추상화
	 - 공통성질 추출
	정보은닉
	 - 코드 내부 데이터와 메서드를 숨기고 공개하는 인터페이스에서만 접근이 가능하도록 하는 코드보안기술 
	관계성
	 - 두개이상의 개체(entity) 형에서 데이터를 참조하는 관계를 나타내는 기법.
	  연관화 : is - member - of 클래스와 객체의 참조 및 이용관계 - 같은 계층에 속하는 클래스들 사이의 상호 의존성을 보여주는 비계층적 관계
	  집단화 : is - part - of 관련 있는 여러개의 객체를 묶어 한개의 상위 객체를 만드는 특징, 일반화와는 다르게 상위클래스의 성질들이 하위클래스로 상속되지는 않는다
	  분류화 : is - instance - of 공통된 속성에 의해 정의된 객체 구성원들의 인스턴스
	  일반화 : is - a 클래스간의 개념적인 포함관계
	  특수화 : is - a 특성들을 상속받으면서 하위클래스에 나름대로 수정을 가하고 자신의 고유한 특성을 갖는 관계
	  
객체지향 설계 원칙 SOLID
	단일 책임의 원칙 : 하나의 목적을 위해 생성되며 클래스가 제공하는 모든 서비스는 하나의 책임을 수행하는 집중
	개방 폐쇄의 원칙 : 소프트웨어 구성요소(컴포넌트 클래스 모듈 함수)는 확장에는 열려있고 변경에는 닫혀있어야함.
	리스코프 치환의 법칙 : 자식클래스는 언제나 부모클래스로 교체할 수 있어야한다
	인터페이스 분리의 원칙 : 자신이 사용하지 않는 인터페이스는 구현하면 안되며 객체설계시 특정기느에 대한 인터페이스는 그 기능과 상관없는 부분이 변해도 영향을 받지 말아야 한다.
	의존성 역전의 원칙 : 어떤 클래스를 참조해서 사용하는 경우에 그 클래스를 직접 참조하는 것이 아니라 그 대상의 상위 요소인 추상클래스나 인터페이스를 참조하라는 원칙

에자일 : 사람이 먼줘돠 훠훠. 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발 할 수 있는 신속 적응형. 개발 기간이 짧고 신속하며 워터폴 모형에 대비되는 방법론
 -XP 
 -SCRUM
 -RIN  